// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: sub.sql

package queries

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const aggregateCost = `-- name: AggregateCost :one
SELECT COALESCE(SUM(price), 0) FROM subscriptions
WHERE ($1::uuid IS NULL OR user_id = $1)
  AND ($2::text IS NULL OR service_name = $2)
  AND start_date <= $3
  AND (end_date IS NULL OR end_date >= $4)
`

type AggregateCostParams struct {
	Column1   uuid.UUID
	Column2   string
	StartDate time.Time
	EndDate   sql.NullTime
}

func (q *Queries) AggregateCost(ctx context.Context, arg AggregateCostParams) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, aggregateCost,
		arg.Column1,
		arg.Column2,
		arg.StartDate,
		arg.EndDate,
	)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const createSubscription = `-- name: CreateSubscription :exec
INSERT INTO subscriptions (id, service_name, price, user_id, start_date, end_date)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateSubscriptionParams struct {
	ID          uuid.UUID
	ServiceName string
	Price       int32
	UserID      uuid.UUID
	StartDate   time.Time
	EndDate     sql.NullTime
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, createSubscription,
		arg.ID,
		arg.ServiceName,
		arg.Price,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
	)
	return err
}

const deleteSubscription = `-- name: DeleteSubscription :exec
DELETE FROM subscriptions WHERE id = $1
`

func (q *Queries) DeleteSubscription(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSubscription, id)
	return err
}

const getSubscriptionByID = `-- name: GetSubscriptionByID :one
SELECT id, service_name, price, user_id, start_date, end_date FROM subscriptions WHERE id = $1
`

func (q *Queries) GetSubscriptionByID(ctx context.Context, id uuid.UUID) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionByID, id)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.ServiceName,
		&i.Price,
		&i.UserID,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const listSubscriptionsPaginated = `-- name: ListSubscriptionsPaginated :many
SELECT id, service_name, price, user_id, start_date, end_date
FROM subscriptions
WHERE ($1::uuid IS NULL OR user_id = $1)
  AND ($2::text IS NULL OR service_name ILIKE '%' || $2 || '%')
ORDER BY start_date DESC
LIMIT $3 OFFSET $4
`

type ListSubscriptionsPaginatedParams struct {
	Column1 uuid.UUID
	Column2 string
	Limit   int32
	Offset  int32
}

func (q *Queries) ListSubscriptionsPaginated(ctx context.Context, arg ListSubscriptionsPaginatedParams) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, listSubscriptionsPaginated,
		arg.Column1,
		arg.Column2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.ServiceName,
			&i.Price,
			&i.UserID,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscription = `-- name: UpdateSubscription :exec
UPDATE subscriptions
SET service_name = $2, price = $3, start_date = $4, end_date = $5
WHERE id = $1
`

type UpdateSubscriptionParams struct {
	ID          uuid.UUID
	ServiceName string
	Price       int32
	StartDate   time.Time
	EndDate     sql.NullTime
}

func (q *Queries) UpdateSubscription(ctx context.Context, arg UpdateSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateSubscription,
		arg.ID,
		arg.ServiceName,
		arg.Price,
		arg.StartDate,
		arg.EndDate,
	)
	return err
}
